name: Optimized Docker Build and Push

on:
  push:
    branches: [main]
    paths:
      - Dockerfile
      - start.sh
      - Caddyfile
      - config.yaml.template
      - .github/workflows/*.yml
      - .env
      - release_notes.md.template
  workflow_dispatch:

env:
  IMAGE_NAME: mihomo
  REGISTRY: ghcr.io
  DOCKERHUB_IMAGE_NAME: daitcl/mihomo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2：加载环境变量（内联实现）
      - name: Load environment variables
        id: set-versions
        run: |
          # 确保.env文件存在
          if [ ! -f .env ]; then
            echo "::error::.env file not found!"
            exit 1
          fi
          
          # 处理Windows换行符
          sed -i 's/\r$//' .env
          
          # 安全加载变量
          while IFS= read -r line; do
            [[ $line =~ ^# ]] && continue  # 跳过注释
            [[ -z $line ]] && continue     # 跳过空行
            
            # 提取变量名和值
            var_name=$(echo "$line" | cut -d '=' -f1)
            var_value=$(echo "$line" | cut -d '=' -f2-)
            
            # 设置到GITHUB_ENV
            echo "$var_name=$var_value" >> $GITHUB_ENV
            echo "Set $var_name"
          done < .env
          
          # 设置镜像完整名称
          echo "IMAGE_FULL_NAME=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "Set IMAGE_FULL_NAME=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"

      # 步骤3：验证版本
      - name: Verify MetaCubeX version
        run: |
          # 直接检查特定标签是否存在
          if ! git ls-remote --exit-code --tags \
            https://github.com/MetaCubeX/metacubexd.git \
            "refs/tags/${{ env.MetaCubeX_VERSION }}"; then
            
            echo "::error::MetaCubeX version ${{ env.MetaCubeX_VERSION }} does not exist!"
            # 获取最新5个标签用于调试
            echo "Last 5 available versions:"
            git ls-remote --tags https://github.com/MetaCubeX/metacubexd.git \
              | awk -F/ '{print $3}' | sort -V | tail -5
            exit 1
          fi
          echo "Version ${{ env.MetaCubeX_VERSION }} is valid"

      # 步骤4：生成发布说明
      - name: Generate release notes
        run: |
          sed -e "s/{{MI_VERSION}}/${{ env.MI_VERSION }}/g" \
              -e "s/{{MetaCubeX_VERSION}}/${{ env.MetaCubeX_VERSION }}/g" \
              release_notes.md.template > release_notes.md
          
          echo -e "\n### 镜像URL" >> release_notes.md
          echo "- **GitHub Container Registry:** \`${{ env.IMAGE_FULL_NAME }}:${{ env.MI_VERSION }}\`" >> release_notes.md
          echo "- **Docker Hub:** \`${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.MI_VERSION }}\`" >> release_notes.md

      # 步骤5：登录容器注册表
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤6：构建并推送镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_FULL_NAME }}:${{ env.MI_VERSION }}
            ${{ env.IMAGE_FULL_NAME }}:latest
            ${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.MI_VERSION }}
            ${{ env.DOCKERHUB_IMAGE_NAME }}:latest
          build-args: |
            MI_VERSION=${{ env.MI_VERSION }}
            MetaCubeX_VERSION=${{ env.MetaCubeX_VERSION }}
          platforms: linux/amd64
          labels: |
            org.opencontainers.image.version=${{ env.MI_VERSION }}
            org.opencontainers.image.description=Clash core with Metacubexd dashboard

      # 步骤7：更新Docker Hub描述
      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKERHUB_IMAGE_NAME }}
          readme-filepath: ./release_notes.md

      # 步骤8：显示构建信息
      - name: Show build information
        run: |
          echo "=== Build Summary ==="
          echo "Image Version: ${{ env.MI_VERSION }}"
          echo "Metacubexd Version: ${{ env.MetaCubeX_VERSION }}"
          echo "GitHub Container Registry:"
          echo "https://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/pkgs/container/${{ env.IMAGE_NAME }}"
          echo "Docker Hub: https://hub.docker.com/r/${{ env.DOCKERHUB_IMAGE_NAME }}"