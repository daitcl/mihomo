name: Docker Build and Push

on:
  push:
    branches: [main]
    paths:
      - Dockerfile
      - start.sh
      - Caddyfile
      - config.yaml.template
      - .github/workflows/docker-build.yml
      - .env
  workflow_dispatch:

env:
  IMAGE_NAME: mihomo
  REGISTRY: ghcr.io
  DOCKERHUB_IMAGE_NAME: daitcl/mihomo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2：加载和验证环境变量
      - name: Load and validate environment variables
        id: set-versions
        run: |
          # 确保.env文件存在
          if [ ! -f .env ]; then
            echo "::error::.env file not found!"
            exit 1
          fi
          
          # 处理Windows换行符
          sed -i 's/\r$//' .env
          
          # 安全加载变量并验证必需字段
          required_vars=("MI_VERSION" "MetaCubeX_VERSION")
          for var in "${required_vars[@]}"; do
            value=$(grep -E "^${var}=" .env | cut -d '=' -f2-)
            if [ -z "$value" ]; then
              echo "::error::Missing or empty required variable: $var in .env file"
              exit 1
            fi
            echo "${var}=${value}" >> $GITHUB_ENV
            echo "Set ${var}=${value}"
          done
          
          # 设置镜像完整名称
          echo "IMAGE_FULL_NAME=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "Set IMAGE_FULL_NAME=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"

      # 步骤3：验证MetaCubeX版本
      - name: Verify MetaCubeX version
        run: |
          version="${{ env.MetaCubeX_VERSION }}"
          echo "Verifying MetaCubeX version: $version"
          
          # 使用API直接检查版本存在性
          api_url="https://api.github.com/repos/MetaCubeX/metacubexd/tags"
          response=$(curl -s -H "Accept: application/vnd.github.v3+json" "$api_url")
          
          if ! echo "$response" | jq -e --arg version "$version" 'any(.[]; .name == $version)' > /dev/null; then
            echo "::error::MetaCubeX version $version does not exist!"
            echo "Last 5 available versions:"
            echo "$response" | jq -r '.[].name' | head -5
            exit 1
          fi
          
          echo "Version $version is valid"

      # 步骤4：生成发布说明
      - name: Generate release notes
        run: |
          sed -e "s/{{MI_VERSION}}/${{ env.MI_VERSION }}/g" \
              -e "s/{{MetaCubeX_VERSION}}/${{ env.MetaCubeX_VERSION }}/g" \
              release_notes.md.template > release_notes.md
          
          echo -e "\n### 镜像URL" >> release_notes.md
          echo "- **GitHub Container Registry:** \`${{ env.IMAGE_FULL_NAME }}:${{ env.MI_VERSION }}\`" >> release_notes.md
          echo "- **Docker Hub:** \`${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.MI_VERSION }}\`" >> release_notes.md

      # 步骤5：设置Docker Buildx（修复缓存问题）
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      # 步骤6：登录容器注册表
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤7：构建并推送镜像（修复缓存配置）
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_FULL_NAME }}:${{ env.MI_VERSION }}
            ${{ env.IMAGE_FULL_NAME }}:latest
            ${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.MI_VERSION }}
            ${{ env.DOCKERHUB_IMAGE_NAME }}:latest
          build-args: |
            MI_VERSION=${{ env.MI_VERSION }}
            MetaCubeX_VERSION=${{ env.MetaCubeX_VERSION }}
          platforms: linux/amd64
          labels: |
            org.opencontainers.image.version=${{ env.MI_VERSION }}
            org.opencontainers.image.description=Clash core with Metacubexd dashboard
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 步骤8：更新Docker Hub描述
      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKERHUB_IMAGE_NAME }}
          readme-filepath: ./release_notes.md

      # 步骤9：显示构建信息
      - name: Show build information
        run: |
          echo "=== Build Summary ==="
          echo "Image Version: ${{ env.MI_VERSION }}"
          echo "Metacubexd Version: ${{ env.MetaCubeX_VERSION }}"
          echo ""
          echo "GitHub Container Registry:"
          echo "https://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/pkgs/container/${{ env.IMAGE_NAME }}"
          echo ""
          echo "Docker Hub Registry:"
          echo "https://hub.docker.com/r/${{ env.DOCKERHUB_IMAGE_NAME }}"
          echo ""
          echo "Release Notes Preview:"
          head -n 10 release_notes.md
