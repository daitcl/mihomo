name: Update Versions from Issue

on:
  issues:
    types: [opened, edited]

jobs:
  update-env:
    # 仅处理包含版本更新关键字的 Issue
    if: |
      contains(github.event.issue.body, 'MI_VERSION=') ||
      contains(github.event.issue.body, 'MetaCubeX_VERSION=') ||
      contains(github.event.issue.title, 'MI_VERSION=') ||
      contains(github.event.issue.title, 'MetaCubeX_VERSION=')
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'  # 替换为您的分支名

      - name: Extract Version Variables
        id: extract_versions
        run: |
          # 从 Issue 内容中提取版本号
          CONTENT="${{ github.event.issue.title }} ${{ github.event.issue.body }}"
          
          # 提取 MI_VERSION 的值
          MI_NEW=$(echo "$CONTENT" | grep -oP 'MI_VERSION=\K[^\s]+' || true)
          if [ -n "$MI_NEW" ]; then
            echo "MI_VERSION=${MI_NEW}" >> $GITHUB_OUTPUT
          fi
          
          # 提取 MetaCubeX_VERSION 的值
          META_NEW=$(echo "$CONTENT" | grep -oP 'MetaCubeX_VERSION=\K[^\s]+' || true)
          if [ -n "$META_NEW" ]; then
            echo "MetaCubeX_VERSION=${META_NEW}" >> $GITHUB_OUTPUT
          fi
          
          # 设置更新标志
          if [ -n "$MI_NEW" ] || [ -n "$META_NEW" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate MI_VERSION
        if: steps.extract_versions.outputs.MI_VERSION != ''
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -w "%{http_code}" -o /dev/null https://api.github.com/repos/MetaCubeX/mihomo/releases/tags/${{ steps.extract_versions.outputs.MI_VERSION }})
          if [ "$RESPONSE" -ne 200 ]; then
            echo "::error::mihomo版本 ${{ steps.extract_versions.outputs.MI_VERSION }} 不存在于GitHub Release (HTTP代码: $RESPONSE)"
            exit 1
          fi

      - name: Validate MetaCubeX_VERSION
        if: steps.extract_versions.outputs.MetaCubeX_VERSION != ''
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -w "%{http_code}" -o /dev/null https://api.github.com/repos/MetaCubeX/metacubexd/releases/tags/${{ steps.extract_versions.outputs.MetaCubeX_VERSION }})
          if [ "$RESPONSE" -ne 200 ]; then
            echo "::error::Metacubexd版本 ${{ steps.extract_versions.outputs.MetaCubeX_VERSION }} 不存在于GitHub Release (HTTP代码: $RESPONSE)"
            exit 1
          fi

      - name: Update .env file
        if: steps.extract_versions.outputs.has_updates == 'true'
        run: |
          # 备份原始文件
          cp .env .env.backup
          
          # 更新 MI_VERSION
          if [ -n "${{ steps.extract_versions.outputs.MI_VERSION }}" ]; then
            sed -i "s/^MI_VERSION=.*/MI_VERSION=${{ steps.extract_versions.outputs.MI_VERSION }}/" .env
          fi
          
          # 更新 MetaCubeX_VERSION
          if [ -n "${{ steps.extract_versions.outputs.MetaCubeX_VERSION }}" ]; then
            sed -i "s/^MetaCubeX_VERSION=.*/MetaCubeX_VERSION=${{ steps.extract_versions.outputs.MetaCubeX_VERSION }}/" .env
          fi
          
          # 显示更新结果
          echo "Updated .env:"
          grep -E 'MI_VERSION|MetaCubeX_VERSION' .env

      - name: Commit Changes
        if: steps.extract_versions.outputs.has_updates == 'true'
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add .env
          git commit -m "Update versions from Issue #${{ github.event.issue.number }}"
          git push